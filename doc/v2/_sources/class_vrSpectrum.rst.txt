----------
vrSpectrum
----------


.. _vredvrSpectrum:
.. py:class:: vrSpectrum



This class represents a color spectrum.

The :any:`vrSpectrum <vredvrSpectrum>` represents a color spectrum and provides various functions to construct a spectrum. A spectrum is represented as a list of wavelengths and a matching list of values for these wavelengths. From these wavelenghts and source values a sample spectrum is calculated for rendering which always uses the spectral range from 380nm to 780nm with 10nm wide sample buckets (40 samples in total). This class provides functions for loading and saving spectrum files as well as creating a reflection or D65 illumination spectrum from RGB values. Additional functions for creating and combining analytic spectra and setting fully custom spectra are also provided.

A basic example on how to apply a spectrum and the corresponding color to a material:

.. code-block:: python

     # create a plastic material
     plastic = vrMaterialService.createMaterial("Plastic Material", vrMaterialTypes.Plastic)
     
     # create a spectrum
     spectrum = vrSpectrum()
     spectrum.set(380, 50, [0.6,0.8,0.4,0.2,0.15,0.1,0.1,0.0,0.0])
     spectrum.setUseSpectrum(True)
     
     # apply the spectrum
     plastic.setDiffuseColorSpectrum(spectrum)
     
     # apply the color that matches the spectrum
     plastic.setDiffuseColor(spectrum.getRGB())
..


    .. _vredvrSpectrum.SpectraDefines:
    .. py:class:: SpectraDefines




            

            .. _vredvrSpectrum.SpectraDefines.SpectraSampleCount:
            .. py:data:: SpectraSampleCount


            

            .. _vredvrSpectrum.SpectraDefines.WavelengthStart:
            .. py:data:: WavelengthStart


            

            .. _vredvrSpectrum.SpectraDefines.WavelengthEnd:
            .. py:data:: WavelengthEnd


            

            .. _vredvrSpectrum.SpectraDefines.WavelengthDelta:
            .. py:data:: WavelengthDelta


            

            .. _vredvrSpectrum.SpectraDefines.SourceWavelengthsCount:
            .. py:data:: SourceWavelengthsCount


            

            .. _vredvrSpectrum.SpectraDefines.SourceWavelengthDelta:
            .. py:data:: SourceWavelengthDelta


    .. _vredvrSpectrum.AnalyticFunction:
    .. py:class:: AnalyticFunction




            

            .. _vredvrSpectrum.AnalyticFunction.Blackbody:
            .. py:data:: Blackbody


            

            .. _vredvrSpectrum.AnalyticFunction.CIE_D:
            .. py:data:: CIE_D


            

            .. _vredvrSpectrum.AnalyticFunction.Gauss:
            .. py:data:: Gauss


            

            .. _vredvrSpectrum.AnalyticFunction.Cosine:
            .. py:data:: Cosine


            

            .. _vredvrSpectrum.AnalyticFunction.Bartlett:
            .. py:data:: Bartlett


            

            .. _vredvrSpectrum.AnalyticFunction.Blackman:
            .. py:data:: Blackman


            

            .. _vredvrSpectrum.AnalyticFunction.Connes:
            .. py:data:: Connes


            

            .. _vredvrSpectrum.AnalyticFunction.Hamming:
            .. py:data:: Hamming


            

            .. _vredvrSpectrum.AnalyticFunction.Hanning:
            .. py:data:: Hanning


            

            .. _vredvrSpectrum.AnalyticFunction.Lorentzian:
            .. py:data:: Lorentzian


            

            .. _vredvrSpectrum.AnalyticFunction.Welch:
            .. py:data:: Welch





Summary
=======

Functions:
    * :ref:`add(spectrumB) <vredvrSpectrum.add(spectrumB)>`
    * :ref:`addAnalyticFunction(function, peakWavelength, peakIntensity, fwhm, kelvin, clear, wavelengthStart, wavelengthDelta, wavelengthCount) <vredvrSpectrum.addAnalyticFunction(function, peakWavelength, peakIntensity, fwhm, kelvin, clear, wavelengthStart, wavelengthDelta, wavelengthCount)>`
    * :ref:`copy(source) → bool<vredvrSpectrum.copy(source)>`
    * :ref:`getMaxValue() → float<vredvrSpectrum.getMaxValue()>`
    * :ref:`getPhotometricValue() → float<vredvrSpectrum.getPhotometricValue()>`
    * :ref:`getRGB() → QVector3D<vredvrSpectrum.getRGB()>`
    * :ref:`getSample(i) → float<vredvrSpectrum.getSample(i)>`
    * :ref:`getSamples() → List[float]<vredvrSpectrum.getSamples()>`
    * :ref:`getSourceValue(i) → float<vredvrSpectrum.getSourceValue(i)>`
    * :ref:`getSourceValues() → List[float]<vredvrSpectrum.getSourceValues()>`
    * :ref:`getStartWavelength() → integer<vredvrSpectrum.getStartWavelength()>`
    * :ref:`getSum() → float<vredvrSpectrum.getSum()>`
    * :ref:`getUseSpectrum() → bool<vredvrSpectrum.getUseSpectrum()>`
    * :ref:`getWavelength(i) → float<vredvrSpectrum.getWavelength(i)>`
    * :ref:`getWavelengthCount() → integer<vredvrSpectrum.getWavelengthCount()>`
    * :ref:`getWavelengthDelta() → integer<vredvrSpectrum.getWavelengthDelta()>`
    * :ref:`getWavelengths() → List[float]<vredvrSpectrum.getWavelengths()>`
    * :ref:`getXYZ() → QVector3D<vredvrSpectrum.getXYZ()>`
    * :ref:`isActive() → bool<vredvrSpectrum.isActive()>`
    * :ref:`isInitialized() → bool<vredvrSpectrum.isInitialized()>`
    * :ref:`load(filename) → bool<vredvrSpectrum.load(filename)>`
    * :ref:`operator=(other) → vrSpectrum<vredvrSpectrum.operator=(other)>`
    * :ref:`resampleSource(wavelengthStart, wavelengthDelta, wavelengthCount) <vredvrSpectrum.resampleSource(wavelengthStart, wavelengthDelta, wavelengthCount)>`
    * :ref:`save(filename) → bool<vredvrSpectrum.save(filename)>`
    * :ref:`scale(scalingFactor) <vredvrSpectrum.scale(scalingFactor)>`
    * :ref:`set(value, wavelengthStart, wavelengthDelta, wavelengthCount) <vredvrSpectrum.set(value, wavelengthStart, wavelengthDelta, wavelengthCount)>`
    * :ref:`set(wavelengthStart, wavelengthDelta, values) → bool<vredvrSpectrum.set(wavelengthStart, wavelengthDelta, values)>`
    * :ref:`set(wavelengths, values) → bool<vredvrSpectrum.set(wavelengths, values)>`
    * :ref:`setIlluminationSpectrumFromRGB(red, green, blue, wavelengthStart, wavelengthDelta, wavelengthCount) <vredvrSpectrum.setIlluminationSpectrumFromRGB(red, green, blue, wavelengthStart, wavelengthDelta, wavelengthCount)>`
    * :ref:`setOne() <vredvrSpectrum.setOne()>`
    * :ref:`setPhotometricValue(value) <vredvrSpectrum.setPhotometricValue(value)>`
    * :ref:`setRGB(red, green, blue, wavelengthStart, wavelengthDelta, wavelengthCount) <vredvrSpectrum.setRGB(red, green, blue, wavelengthStart, wavelengthDelta, wavelengthCount)>`
    * :ref:`setUseSpectrum(useSpectrum) <vredvrSpectrum.setUseSpectrum(useSpectrum)>`
    * :ref:`vrSpectrum() <vredvrSpectrum.vrSpectrum()>`
    * :ref:`vrSpectrum(other) <vredvrSpectrum.vrSpectrum(other)>`
    * :ref:`vrSpectrum(red, green, blue) <vredvrSpectrum.vrSpectrum(red, green, blue)>`
    * :ref:`vrSpectrum(rgb) <vredvrSpectrum.vrSpectrum(rgb)>`


Functions
=========


.. _vredvrSpectrum.add(spectrumB):
.. py:method:: vrSpectrum.add(spectrumB)

    Adds a spectrum to the current spectrum When the wavelengths of the two spectra do not overlap they will be concatenated. If the wavelengths do overlap the values of the provided spectrum will be added to the current spectrum. If both spectra were loaded from a .TXT file they are assumed to contain adjoining spectra and will be scaled to create a unified spectrum.



    :param spectrumB: The spectrum to add to the current spectrum
    :type spectrumB: vrSpectrum

    
    

.. _vredvrSpectrum.addAnalyticFunction(function, peakWavelength, peakIntensity, fwhm, kelvin, clear, wavelengthStart, wavelengthDelta, wavelengthCount):
.. py:method:: vrSpectrum.addAnalyticFunction(function, peakWavelength, peakIntensity, fwhm, kelvin, clear=True, wavelengthStart=WavelengthStart, wavelengthDelta=SourceWavelengthDelta, wavelengthCount=SourceWavelengthsCount)

    Calculates an analytic spectrum and adds it to the current spectrum.

    | The addAnalyticFunction calculates an analytic function with the given parameters and adds them to the current spectrum. Various types are available:
    |     Blackbody
    |     CIE_D
    |     Gauss
    |     Cosine
    |     Bartlett
    |     Blackman
    |     Connes
    |     Hamming
    |     Hanning
    |     Lorentzian
    |     Welch

    :param function: The type of function to use
    :type function: AnalyticFunction

    :param peakWavelength: The center wavelength for the calculated spectrum except for the CIE_D type
    :type peakWavelength: float

    :param peakIntensity: The maximum intensity of the calculated spectrum
    :type peakIntensity: float

    :param fwhm: The full width at half maximum value. It describes the width of the analytic functions except for the CIE_D type
    :type fwhm: float

    :param kelvin: The correlated color temperature for the CIE_D function calculation
    :type kelvin: float

    :param clear: If true the existing spectrum is replaced, otherwise the calculated spectrum is added to the existing spectrum
    :type clear: bool

    :param wavelengthStart: The start wavelength for the initialization. Default is 380nm
    :type wavelengthStart: integer

    :param wavelengthDelta: The delta between two adjacent wavelengths. Default is 5nm
    :type wavelengthDelta: integer

    :param wavelengthCount: The number of wavelengths to use. Default is 81 samples. The end wavelength is calculated as startwavelength + wavelengthCount * wavelengthDelta
    :type wavelengthCount: integer

    
    

.. _vredvrSpectrum.copy(source):
.. py:method:: vrSpectrum.copy(source)

    Copies the given spectrum to the current spectrum.



    :param source: The source spectrum to copy from
    :type source: vrSpectrum

    :return: True if the copy was successful, False otherwise
    :rtype: bool

.. _vredvrSpectrum.getMaxValue():
.. py:method:: vrSpectrum.getMaxValue()

    Returns the maximum value of the spectrum.




    :return: The maximum value of the spectrum
    :rtype: float

.. _vredvrSpectrum.getPhotometricValue():
.. py:method:: vrSpectrum.getPhotometricValue()

    Returns the photometric value of the spectrum.




    :return: The photometric value of the spectrum
    :rtype: float

.. _vredvrSpectrum.getRGB():
.. py:method:: vrSpectrum.getRGB()

    Converts the reflection spectrum to linear rgb with sRGB primaries and returns it.




    :return: The linear rgb color with sRGB primaries of the spectrum
    :rtype: QVector3D

.. _vredvrSpectrum.getSample(i):
.. py:method:: vrSpectrum.getSample(i)

    Returns sampled for the i-th sample in the spectrum.



    :param i: 
    :type i: integer

    :return: Value of i-th sample in the spectrum
    :rtype: float

.. _vredvrSpectrum.getSamples():
.. py:method:: vrSpectrum.getSamples()

    Returns the sampled spectrum values.

    The returned values represent the spectrum used for rendering in the 380nm to 780nm range with 10nm wide sample buckets


    :return: List of sampled spectrum values in the spectrum
    :rtype: List[float]

.. _vredvrSpectrum.getSourceValue(i):
.. py:method:: vrSpectrum.getSourceValue(i)

    Returns source spectrum value for the i-th sample in the spectrum.



    :param i: The index of the source spectrum value to return
    :type i: integer

    :return: Source spectrum value of the i-th sample in the spectrum
    :rtype: float

.. _vredvrSpectrum.getSourceValues():
.. py:method:: vrSpectrum.getSourceValues()

    Returns the list of source spectrum values used in the spectrum.




    :return: List of source spectrum values in the spectrum
    :rtype: List[float]

.. _vredvrSpectrum.getStartWavelength():
.. py:method:: vrSpectrum.getStartWavelength()

    Returns the first wavelength of the spectrum.




    :return: The first wavelength
    :rtype: integer

.. _vredvrSpectrum.getSum():
.. py:method:: vrSpectrum.getSum()

    Returns the sum of all sample values of the spectrum.




    :return: The sum of all sample values of the spectrum
    :rtype: float

.. _vredvrSpectrum.getUseSpectrum():
.. py:method:: vrSpectrum.getUseSpectrum()

    Returns whether the spectrum is set to active or not.




    :return: The state of the spectrum usage flag
    :rtype: bool

.. _vredvrSpectrum.getWavelength(i):
.. py:method:: vrSpectrum.getWavelength(i)

    Returns wavelength for the i-th sample in the spectrum.



    :param i: The index of the wavelength to return
    :type i: integer

    :return: Wavelength of i-th sample in the spectrum
    :rtype: float

.. _vredvrSpectrum.getWavelengthCount():
.. py:method:: vrSpectrum.getWavelengthCount()

    Returns the number of wavelength/value pairs in the spectrum.




    :return: The number of wavelength/value pairs in the spectrum
    :rtype: integer

.. _vredvrSpectrum.getWavelengthDelta():
.. py:method:: vrSpectrum.getWavelengthDelta()

    Returns the delta between wavelengths of the spectrum.




    :return: The delta between wavelengths in the spectrum
    :rtype: integer

.. _vredvrSpectrum.getWavelengths():
.. py:method:: vrSpectrum.getWavelengths()

    Returns the list of wavelengths used in the spectrum.




    :return: List of wavelengths in the spectrum
    :rtype: List[float]

.. _vredvrSpectrum.getXYZ():
.. py:method:: vrSpectrum.getXYZ()

    Converts the spectrum to CIE XYZ and returns it.




    :return: The XYZ color of the spectrum
    :rtype: QVector3D

.. _vredvrSpectrum.isActive():
.. py:method:: vrSpectrum.isActive()

    Returns whether the spectrum is active or inactive.




    :return: The active state of the spectrum
    :rtype: bool

.. _vredvrSpectrum.isInitialized():
.. py:method:: vrSpectrum.isInitialized()

    Returns whether the spectrum has been initialized.




    :return: The initialization state
    :rtype: bool

.. _vredvrSpectrum.load(filename):
.. py:method:: vrSpectrum.load(filename)

    Loads the spectrum data from a file.



    :param filename: The filename of the spectrum file to load
    :type filename: string

    :return: True if loading the file was successful, False otherwise
    :rtype: bool

.. _vredvrSpectrum.operator=(other):
.. py:method:: vrSpectrum.operator=(other)

    Assigns another spectrum to the current spectrum.



    :param other: The spectrum to set this spectrum to
    :type other: vrSpectrum

    :return: 
    :rtype: vrSpectrum

.. _vredvrSpectrum.resampleSource(wavelengthStart, wavelengthDelta, wavelengthCount):
.. py:method:: vrSpectrum.resampleSource(wavelengthStart, wavelengthDelta, wavelengthCount)

    Resamples the source spectrum according to the given settings.



    :param wavelengthStart: The start wavelength for the resampling
    :type wavelengthStart: integer

    :param wavelengthDelta: The delta between two adjacent wavelengths
    :type wavelengthDelta: integer

    :param wavelengthCount: The number of wavelengths to use
    :type wavelengthCount: integer

    
    

.. _vredvrSpectrum.save(filename):
.. py:method:: vrSpectrum.save(filename)

    Saves the spectrum data to a file.



    :param filename: The filename of the spectrum file to save
    :type filename: string

    :return: True if loading the file was successful, False otherwise
    :rtype: bool

.. _vredvrSpectrum.scale(scalingFactor):
.. py:method:: vrSpectrum.scale(scalingFactor)

    Scales the current spectrum.



    :param scalingFactor: The scaling factor
    :type scalingFactor: float

    
    

.. _vredvrSpectrum.set(value, wavelengthStart, wavelengthDelta, wavelengthCount):
.. py:method:: vrSpectrum.set(value, wavelengthStart=WavelengthStart, wavelengthDelta=SourceWavelengthDelta, wavelengthCount=SourceWavelengthsCount)

    Sets the spectrum to a given value for all wavelengths.



    :param value: The value to set all wavelengths to
    :type value: float

    :param wavelengthStart: The start wavelength for the initialization. Default is 380nm
    :type wavelengthStart: integer

    :param wavelengthDelta: The delta between two adjacent wavelengths. Default is 5nm
    :type wavelengthDelta: integer

    :param wavelengthCount: The number of wavelengths to use. Default is 81 samples. The end wavelength is calculated as startwavelength + wavelengthCount * wavelengthDelta
    :type wavelengthCount: integer

    
    

.. _vredvrSpectrum.set(wavelengthStart, wavelengthDelta, values):
.. py:method:: vrSpectrum.set(wavelengthStart, wavelengthDelta, values)

    Sets the values of a spectrum.



    :param wavelengthStart: The wavelength for the first value
    :type wavelengthStart: integer

    :param wavelengthDelta: The delta between wavelengths
    :type wavelengthDelta: integer

    :param values: The values of the wavelengths
    :type values: List[float]

    :return: True if setting the spectrum was successful, False otherwise
    :rtype: bool

.. _vredvrSpectrum.set(wavelengths, values):
.. py:method:: vrSpectrum.set(wavelengths, values)

    Sets the values of a spectrum.



    :param wavelengths: The wavelengths of the spectrum. The number of wavelengths must match the number of values
    :type wavelengths: List[float]

    :param values: The values of the wavelengths. The number values of must match the number of wavelengths
    :type values: List[float]

    :return: True if setting the spectrum was successful, False otherwise
    :rtype: bool

.. _vredvrSpectrum.setIlluminationSpectrumFromRGB(red, green, blue, wavelengthStart, wavelengthDelta, wavelengthCount):
.. py:method:: vrSpectrum.setIlluminationSpectrumFromRGB(red, green, blue, wavelengthStart=WavelengthStart, wavelengthDelta=SourceWavelengthDelta, wavelengthCount=SourceWavelengthsCount)

    Set the spectrum to a D65 based illumination spectrum from linear rgb values with sRGB primaries.

    The setIlluminationSpectrumFromRGB function set the spectrum to a D65 based illumination spectrum from linear rgb values with sRGB primaries. Use this function to set a spectrum for a lightsource or the incandescence channel of a material when using the default D65 whitepoint.

    :param red: Red color component
    :type red: float

    :param green: Green color component
    :type green: float

    :param blue: Blue color component
    :type blue: float

    :param wavelengthStart: The start wavelength for the initialization. Default is 380nm
    :type wavelengthStart: integer

    :param wavelengthDelta: The delta between two adjacent wavelengths. Default is 5nm
    :type wavelengthDelta: integer

    :param wavelengthCount: The number of wavelengths to use. Default is 81 samples. The end wavelength is calculated as startwavelength + wavelengthCount * wavelengthDelta
    :type wavelengthCount: integer

    
    

.. _vredvrSpectrum.setOne():
.. py:method:: vrSpectrum.setOne()

    Sets the spectrum to all 1 with the default range from 380nm to 780nm with a wavelength delta of 5nm.




    
    

.. _vredvrSpectrum.setPhotometricValue(value):
.. py:method:: vrSpectrum.setPhotometricValue(value)

    Scales the spectrum to match the given photometric value.



    :param value: The photometric value to set
    :type value: float

    
    

.. _vredvrSpectrum.setRGB(red, green, blue, wavelengthStart, wavelengthDelta, wavelengthCount):
.. py:method:: vrSpectrum.setRGB(red, green, blue, wavelengthStart=WavelengthStart, wavelengthDelta=SourceWavelengthDelta, wavelengthCount=SourceWavelengthsCount)

    Set the spectrum to a reflection spectrum from linear rgb values with sRGB primaries.



    :param red: Red color component
    :type red: float

    :param green: Green color component
    :type green: float

    :param blue: Blue color component
    :type blue: float

    :param wavelengthStart: The start wavelength for the initialization. Default is 380nm
    :type wavelengthStart: integer

    :param wavelengthDelta: The delta between two adjacent wavelengths. Default is 5nm
    :type wavelengthDelta: integer

    :param wavelengthCount: The number of wavelengths to use. Default is 81 samples. The end wavelength is calculated as startwavelength + wavelengthCount * wavelengthDelta
    :type wavelengthCount: integer

    
    

.. _vredvrSpectrum.setUseSpectrum(useSpectrum):
.. py:method:: vrSpectrum.setUseSpectrum(useSpectrum)

    Sets the spectrum to active or inactive.



    :param useSpectrum: Set to True to enable the use of the spectrum or to False otherwise
    :type useSpectrum: bool

    
    

.. _vredvrSpectrum.vrSpectrum():
.. py:method:: vrSpectrum.vrSpectrum()

    Creates an empty spectrum.




    
    

.. _vredvrSpectrum.vrSpectrum(other):
.. py:method:: vrSpectrum.vrSpectrum(other)

    Creates a copy of another spectrum.



    :param other: The spectrum to copy the data from
    :type other: vrSpectrum

    
    

.. _vredvrSpectrum.vrSpectrum(red, green, blue):
.. py:method:: vrSpectrum.vrSpectrum(red, green, blue)

    Creates a new spectrum initialized form linear rgb values with sRGB primaries. The range of the spectrum is from 380nm to 780nm with a wavelength delta of 5nm.



    :param red: Red color component
    :type red: float

    :param green: Green color component
    :type green: float

    :param blue: Blue color component
    :type blue: float

    
    

.. _vredvrSpectrum.vrSpectrum(rgb):
.. py:method:: vrSpectrum.vrSpectrum(rgb)

    Creates a new spectrum initialized form linear rgb values with sRGB primaries. The range of the spectrum is from 380nm to 780nm with a wavelength delta of 5nm.



    :param rgb: RGB color in linear space with sRGB primaries
    :type rgb: QVector3D

    
    










