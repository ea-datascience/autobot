--------------------
vrdMaterialChunkList
--------------------


.. _vredvrdMaterialChunkList:
.. py:class:: vrdMaterialChunkList

(Inherits :py:class:`vrdObjectList`)

This class is a container for the chunks of a chunk material.



    .. _vredvrdMaterialChunkList.ChunkType:
    .. py:class:: ChunkType




            

            .. _vredvrdMaterialChunkList.ChunkType.Texture:
            .. py:data:: Texture


            

            .. _vredvrdMaterialChunkList.ChunkType.CubeTexture:
            .. py:data:: CubeTexture


            

            .. _vredvrdMaterialChunkList.ChunkType.Depth:
            .. py:data:: Depth


            

            .. _vredvrdMaterialChunkList.ChunkType.Blend:
            .. py:data:: Blend


            

            .. _vredvrdMaterialChunkList.ChunkType.Polygon:
            .. py:data:: Polygon


            

            .. _vredvrdMaterialChunkList.ChunkType.Shader:
            .. py:data:: Shader


            

            .. _vredvrdMaterialChunkList.ChunkType.Line:
            .. py:data:: Line





Summary
=======

Functions:
    * :ref:`append(value) <vredvrdMaterialChunkList.append(value)>`
    * :ref:`append(values) <vredvrdMaterialChunkList.append(values)>`
    * :ref:`at(i) → vrdMaterialChunk<vredvrdMaterialChunkList.at(i)>`
    * :ref:`canInsert(value) → bool<vredvrdMaterialChunkList.canInsert(value)>`
    * :ref:`clear() <vredvrdMaterialChunkList.clear()>`
    * :ref:`contains(value) → bool<vredvrdMaterialChunkList.contains(value)>`
    * :ref:`count(value) → integer<vredvrdMaterialChunkList.count(value)>`
    * :ref:`create(type) → vrdMaterialChunk<vredvrdMaterialChunkList.create(type)>`
    * :ref:`data() → List[vrdMaterialChunk]<vredvrdMaterialChunkList.data()>`
    * :ref:`index(value, from, to) → integer<vredvrdMaterialChunkList.index(value, from, to)>`
    * :ref:`insert(i, value) <vredvrdMaterialChunkList.insert(i, value)>`
    * :ref:`insert(i, values) <vredvrdMaterialChunkList.insert(i, values)>`
    * :ref:`move(from, to) → bool<vredvrdMaterialChunkList.move(from, to)>`
    * :ref:`remove(value) → bool<vredvrdMaterialChunkList.remove(value)>`
    * :ref:`removeAll(value) → integer<vredvrdMaterialChunkList.removeAll(value)>`
    * :ref:`removeAt(i) → bool<vredvrdMaterialChunkList.removeAt(i)>`
    * :ref:`size() → integer<vredvrdMaterialChunkList.size()>`


Functions
=========


.. _vredvrdMaterialChunkList.append(value):
.. py:method:: vrdMaterialChunkList.append(value)

    Appends the value to this list.



    :param value: The value to append
    :type value: vrdMaterialChunk

    
    

.. _vredvrdMaterialChunkList.append(values):
.. py:method:: vrdMaterialChunkList.append(values)

    Appends the items of the value list to this list.



    :param values: The values to append
    :type values: List[vrdMaterialChunk]

    
    

.. _vredvrdMaterialChunkList.at(i):
.. py:method:: vrdMaterialChunkList.at(i)

    Get the value at the given index.



    :param i: 
    :type i: integer

    :return: i The index of the requested value
    :rtype: vrdMaterialChunk

.. _vredvrdMaterialChunkList.canInsert(value):
.. py:method:: vrdMaterialChunkList.canInsert(value)

    Check, if the given entry can be inserted.



    :param value: 
    :type value: vrdMaterialChunk

    :return: True, if insert is allowed
    :rtype: bool

.. _vredvrdMaterialChunkList.clear():
.. py:method:: vrdMaterialChunkList.clear()

    Removes all items from the list.




    
    

.. _vredvrdMaterialChunkList.contains(value):
.. py:method:: vrdMaterialChunkList.contains(value)

    Check if an element is already in the list.



    :param value: 
    :type value: vrdMaterialChunk

    :return: True, if the given value is in this list
    :rtype: bool

.. _vredvrdMaterialChunkList.count(value):
.. py:method:: vrdMaterialChunkList.count(value)

    Count the occurences of a given vlaue.



    :param value: 
    :type value: vrdMaterialChunk

    :return: The number of times the value has been found in the list
    :rtype: integer

.. _vredvrdMaterialChunkList.create(type):
.. py:method:: vrdMaterialChunkList.create(type)

    Creates a chunk of the given type.



    :param type: 
    :type type: ChunkType

    :return: 
    :rtype: vrdMaterialChunk

.. _vredvrdMaterialChunkList.data():
.. py:method:: vrdMaterialChunkList.data()

    Get all entries of this list.




    :return: List of elements
    :rtype: List[vrdMaterialChunk]

.. _vredvrdMaterialChunkList.index(value, from, to):
.. py:method:: vrdMaterialChunkList.index(value, from=0, to=-1)

    Returns the index of the given value.



    :param value: The value to search
    :type value: vrdMaterialChunk

    :param from: The index to start the search, default is 0
    :type from: integer

    :param to: The index to end the search, default is -1 to search until the end
    :type to: integer

    :return: The index or -1, if not found
    :rtype: integer

.. _vredvrdMaterialChunkList.insert(i, value):
.. py:method:: vrdMaterialChunkList.insert(i, value)

    Insert a value at a given position.



    :param i: The position, starting from 0
    :type i: integer

    :param value: The value to be inserted
    :type value: vrdMaterialChunk

    
    

.. _vredvrdMaterialChunkList.insert(i, values):
.. py:method:: vrdMaterialChunkList.insert(i, values)

    Insert values at a given position.



    :param i: The position, starting from 0
    :type i: integer

    :param values: The values to be inserted
    :type values: List[vrdMaterialChunk]

    
    

.. _vredvrdMaterialChunkList.move(from, to):
.. py:method:: vrdMaterialChunkList.move(from, to)

    Moves a values inside the list.



    :param from: The index to move
    :type from: integer

    :param to: The destination index
    :type to: integer

    :return: True on success, False otherwise
    :rtype: bool

.. _vredvrdMaterialChunkList.remove(value):
.. py:method:: vrdMaterialChunkList.remove(value)

    Remove the first occurences of the given value.



    :param value: 
    :type value: vrdMaterialChunk

    :return: True, if the value has been removed
    :rtype: bool

.. _vredvrdMaterialChunkList.removeAll(value):
.. py:method:: vrdMaterialChunkList.removeAll(value)

    Remove all occurences of the given value.



    :param value: 
    :type value: vrdMaterialChunk

    :return: The number of value that have been removed
    :rtype: integer

.. _vredvrdMaterialChunkList.removeAt(i):
.. py:method:: vrdMaterialChunkList.removeAt(i)

    Remove a value from the list.



    :param i: Index of the value to be removed
    :type i: integer

    :return: True, if the value has been removed
    :rtype: bool

.. _vredvrdMaterialChunkList.size():
.. py:method:: vrdMaterialChunkList.size()

    




    :return: Number of elements in this list.
    :rtype: integer










