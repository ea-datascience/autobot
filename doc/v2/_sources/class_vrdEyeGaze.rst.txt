----------
vrdEyeGaze
----------


.. _vredvrdEyeGaze:
.. py:class:: vrdEyeGaze

(Inherits :py:class:`vrdData`)

Holds eye gaze data returned by     :any:`vrHMDService.getEyeGaze() <vredvrHMDService.getEyeGaze()>`.







Summary
=======

Functions:
    * :ref:`getDirection() → QVector3D<vredvrdEyeGaze.getDirection()>`
    * :ref:`getOrigin() → QVector3D<vredvrdEyeGaze.getOrigin()>`
    * :ref:`isTracked() → bool<vredvrdEyeGaze.isTracked()>`
    * :ref:`setDirection(direction) <vredvrdEyeGaze.setDirection(direction)>`
    * :ref:`setOrigin(origin) <vredvrdEyeGaze.setOrigin(origin)>`
    * :ref:`setTracked(tracked) <vredvrdEyeGaze.setTracked(tracked)>`
    * :ref:`vrdEyeGaze() <vredvrdEyeGaze.vrdEyeGaze()>`
    * :ref:`vrdEyeGaze(state) <vredvrdEyeGaze.vrdEyeGaze(state)>`


Functions
=========


.. _vredvrdEyeGaze.getDirection():
.. py:method:: vrdEyeGaze.getDirection()

    Get normalized direction of the gaze ray.




    :return: gaze direction
    :rtype: QVector3D

.. _vredvrdEyeGaze.getOrigin():
.. py:method:: vrdEyeGaze.getOrigin()

    Get origin of the gaze ray.




    :return: gaze origin in mm
    :rtype: QVector3D

.. _vredvrdEyeGaze.isTracked():
.. py:method:: vrdEyeGaze.isTracked()

    




    :return: True if eye gaze is tracked, False if not tracked.
    :rtype: bool

.. _vredvrdEyeGaze.setDirection(direction):
.. py:method:: vrdEyeGaze.setDirection(direction)

    Set normalized direction of the gaze ray.



    :param direction: Normalized gaze direction
    :type direction: QVector3D

    
    

.. _vredvrdEyeGaze.setOrigin(origin):
.. py:method:: vrdEyeGaze.setOrigin(origin)

    Set origin of the gaze ray.



    :param origin: Gaze origin in mm
    :type origin: QVector3D

    
    

.. _vredvrdEyeGaze.setTracked(tracked):
.. py:method:: vrdEyeGaze.setTracked(tracked)

    Set whether the eye gaze is tracked.



    :param tracked: 
    :type tracked: bool

    
    

.. _vredvrdEyeGaze.vrdEyeGaze():
.. py:method:: vrdEyeGaze.vrdEyeGaze()

    Default constructor.




    
    

.. _vredvrdEyeGaze.vrdEyeGaze(state):
.. py:method:: vrdEyeGaze.vrdEyeGaze(state)

    Copy constructor.



    :param state: 
    :type state: vrdEyeGaze

    
    










