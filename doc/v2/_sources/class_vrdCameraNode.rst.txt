-------------
vrdCameraNode
-------------


.. _vredvrdCameraNode:
.. py:class:: vrdCameraNode

(Inherits :py:class:`vrdCameraBaseNode`)

This class represents a camera in VRED.

For access to existing cameras and to create new cameras use :any:`vrCameraService <vredvrCameraService>`. This class holds all properties that are specific to cameras and not valid for viewpoints (:any:`vrdViewpointNode <vredvrdViewpointNode>`). For more properties see also :any:`vrdCameraBaseNode <vredvrdCameraBaseNode>`.

There are actually two different nodes for each camera in VRED: One node is in the regular scene graph, the second node is in the graph in the Camera Editor. They have different ids but internally work on the same OSG camera.





Summary
=======

Functions:
    * :ref:`activate() <vredvrdCameraNode.activate()>`
    * :ref:`getAimConstraintSources() → List[vrdNode]<vredvrdCameraNode.getAimConstraintSources()>`
    * :ref:`getAimVisualizationScale() → float<vredvrdCameraNode.getAimVisualizationScale()>`
    * :ref:`getAimVisualizationVisible() → bool<vredvrdCameraNode.getAimVisualizationVisible()>`
    * :ref:`getCameraCollider() → vrdCameraCollider<vredvrdCameraNode.getCameraCollider()>`
    * :ref:`getCameraTrack(cameraTrackIndex) → vrdCameraTrackNode<vredvrdCameraNode.getCameraTrack(cameraTrackIndex)>`
    * :ref:`getCameraTrackCount() → integer<vredvrdCameraNode.getCameraTrackCount()>`
    * :ref:`getCameraTracks() → List[vrdCameraTrackNode]<vredvrdCameraNode.getCameraTracks()>`
    * :ref:`getDefaultCameraTrack() → vrdCameraTrackNode<vredvrdCameraNode.getDefaultCameraTrack()>`
    * :ref:`getDollyZoom() → bool<vredvrdCameraNode.getDollyZoom()>`
    * :ref:`getEvaluateNavigationMode() → bool<vredvrdCameraNode.getEvaluateNavigationMode()>`
    * :ref:`getModuleNode() → vrdCameraNode<vredvrdCameraNode.getModuleNode()>`
    * :ref:`getTurntable() → vrdTurntable<vredvrdCameraNode.getTurntable()>`
    * :ref:`getUpVectorConstraintSources() → List[vrdNode]<vredvrdCameraNode.getUpVectorConstraintSources()>`
    * :ref:`getVisualizationScale() → float<vredvrdCameraNode.getVisualizationScale()>`
    * :ref:`getVisualizationVisible() → bool<vredvrdCameraNode.getVisualizationVisible()>`
    * :ref:`hasAimConstraint() → bool<vredvrdCameraNode.hasAimConstraint()>`
    * :ref:`hasAimConstraintSource(sourceNode) → bool<vredvrdCameraNode.hasAimConstraintSource(sourceNode)>`
    * :ref:`isActive() → bool<vredvrdCameraNode.isActive()>`
    * :ref:`isDefault() → bool<vredvrdCameraNode.isDefault()>`
    * :ref:`isInitialCamera() → bool<vredvrdCameraNode.isInitialCamera()>`
    * :ref:`removeAimConstraintSources() → bool<vredvrdCameraNode.removeAimConstraintSources()>`
    * :ref:`removeUpVectorConstraintSources() → bool<vredvrdCameraNode.removeUpVectorConstraintSources()>`
    * :ref:`setAimConstraintSources(nodes) <vredvrdCameraNode.setAimConstraintSources(nodes)>`
    * :ref:`setAimVisualizationScale(value) <vredvrdCameraNode.setAimVisualizationScale(value)>`
    * :ref:`setAimVisualizationVisible(enable) <vredvrdCameraNode.setAimVisualizationVisible(enable)>`
    * :ref:`setDollyZoom(enabled) <vredvrdCameraNode.setDollyZoom(enabled)>`
    * :ref:`setEvaluateNavigationMode(enabled) <vredvrdCameraNode.setEvaluateNavigationMode(enabled)>`
    * :ref:`setInitialCamera() <vredvrdCameraNode.setInitialCamera()>`
    * :ref:`setUpVectorConstraintSources(nodes) <vredvrdCameraNode.setUpVectorConstraintSources(nodes)>`
    * :ref:`setVisualizationScale(value) <vredvrdCameraNode.setVisualizationScale(value)>`
    * :ref:`setVisualizationVisible(enable) <vredvrdCameraNode.setVisualizationVisible(enable)>`
    * :ref:`updateFromPerspectiveMatch() <vredvrdCameraNode.updateFromPerspectiveMatch()>`


Functions
=========


.. _vredvrdCameraNode.activate():
.. py:method:: vrdCameraNode.activate()

    Sets the camera to active.




    
    

.. _vredvrdCameraNode.getAimConstraintSources():
.. py:method:: vrdCameraNode.getAimConstraintSources()

    Returns the list of nodes set as aim constraint sources for the camera.




    :return: The list of aim constraint source nodes.
    :rtype: List[vrdNode]

.. _vredvrdCameraNode.getAimVisualizationScale():
.. py:method:: vrdCameraNode.getAimVisualizationScale()

    Returns the scaling value used for the aim and up vector visualization.




    :return: The visualization scaling value.
    :rtype: float

.. _vredvrdCameraNode.getAimVisualizationVisible():
.. py:method:: vrdCameraNode.getAimVisualizationVisible()

    Queries if the aim and up vector visualization is visible in the renderer.




    :return: True if the visualization is enabled.
    :rtype: bool

.. _vredvrdCameraNode.getCameraCollider():
.. py:method:: vrdCameraNode.getCameraCollider()

    This object gives access to the camera collision functionality.




    :return: The camera collider object.
    :rtype: vrdCameraCollider

.. _vredvrdCameraNode.getCameraTrack(cameraTrackIndex):
.. py:method:: vrdCameraNode.getCameraTrack(cameraTrackIndex)

    Gets the camera track.



    :param cameraTrackIndex: The camera track index
    :type cameraTrackIndex: integer

    :return: The camera track.
    :rtype: vrdCameraTrackNode

.. _vredvrdCameraNode.getCameraTrackCount():
.. py:method:: vrdCameraNode.getCameraTrackCount()

    Returns the number of camera tracks in the camera.




    :return: The number of camera tracks.
    :rtype: integer

.. _vredvrdCameraNode.getCameraTracks():
.. py:method:: vrdCameraNode.getCameraTracks()

    Returns the list of all camera track nodes of the camera.




    :return: The list of camera track nodes.
    :rtype: List[vrdCameraTrackNode]

.. _vredvrdCameraNode.getDefaultCameraTrack():
.. py:method:: vrdCameraNode.getDefaultCameraTrack()

    Returns the default camera track node.




    :return: The default camera track node.
    :rtype: vrdCameraTrackNode

.. _vredvrdCameraNode.getDollyZoom():
.. py:method:: vrdCameraNode.getDollyZoom()

    Returns the state of dolly zoom mode.




    :return: True if dolly zoom mode is enabled, False otherwise.
    :rtype: bool

.. _vredvrdCameraNode.getEvaluateNavigationMode():
.. py:method:: vrdCameraNode.getEvaluateNavigationMode()

    Queries if evaluation of the navigation mode is enabled.




    :return: True if evaluation is enabled, False otherwise.
    :rtype: bool

.. _vredvrdCameraNode.getModuleNode():
.. py:method:: vrdCameraNode.getModuleNode()

    Returns the corresponding camera graph node to this camera node.




    :return: Returns the camera graph node
    :rtype: vrdCameraNode

.. _vredvrdCameraNode.getTurntable():
.. py:method:: vrdCameraNode.getTurntable()

    This object gives access to the turntable.




    :return: The turntable object.
    :rtype: vrdTurntable

.. _vredvrdCameraNode.getUpVectorConstraintSources():
.. py:method:: vrdCameraNode.getUpVectorConstraintSources()

    Returns the list of nodes set as up vector sources for the camera.




    :return: The list of up vector constraint source nodes.
    :rtype: List[vrdNode]

.. _vredvrdCameraNode.getVisualizationScale():
.. py:method:: vrdCameraNode.getVisualizationScale()

    Returns the scaling value used for the camera visualization.




    :return: The visualization scaling value.
    :rtype: float

.. _vredvrdCameraNode.getVisualizationVisible():
.. py:method:: vrdCameraNode.getVisualizationVisible()

    Queries if the visualization for the camera has been enabled.




    :return: The visualization visible.
    :rtype: bool

.. _vredvrdCameraNode.hasAimConstraint():
.. py:method:: vrdCameraNode.hasAimConstraint()

    Queries if the camera has an aim constraint.




    :return: True if has aim constraint, False otherwise.
    :rtype: bool

.. _vredvrdCameraNode.hasAimConstraintSource(sourceNode):
.. py:method:: vrdCameraNode.hasAimConstraintSource(sourceNode)

    Queries if a given node is an aim constraint source for the camera.



    :param sourceNode: The node to check.
    :type sourceNode: vrdNode

    :return: True if the node is part of the aim constraint sources, False otherwise.
    :rtype: bool

.. _vredvrdCameraNode.isActive():
.. py:method:: vrdCameraNode.isActive()

    Determines if the camera is active.




    :return: True if active, False otherwise.
    :rtype: bool

.. _vredvrdCameraNode.isDefault():
.. py:method:: vrdCameraNode.isDefault()

    Determines if the camera is the default camera.




    :return: True if default, False otherwise.
    :rtype: bool

.. _vredvrdCameraNode.isInitialCamera():
.. py:method:: vrdCameraNode.isInitialCamera()

    Queries if this camera is the initial camera.




    :return: True if initial camera, False otherwise.
    :rtype: bool

.. _vredvrdCameraNode.removeAimConstraintSources():
.. py:method:: vrdCameraNode.removeAimConstraintSources()

    Removes all aim constraint sources from the camera.

    Note that this will also remove the default 'CameraNameAim' node which is automatically created and added as an aim constraint source when creating a new camera with an aim constraint.


    :return: True if aim constraint sources could be removed, False otherwise
    :rtype: bool

.. _vredvrdCameraNode.removeUpVectorConstraintSources():
.. py:method:: vrdCameraNode.removeUpVectorConstraintSources()

    Removes all up vector constraint sources.

    Note that this will also remove the default 'CameraNameUp' node which is automatically created and added as an up vector constraint source when creating a new camera with an aim and up constraint.


    :return: True if up vector constraint sources could be removed, False otherwise
    :rtype: bool

.. _vredvrdCameraNode.setAimConstraintSources(nodes):
.. py:method:: vrdCameraNode.setAimConstraintSources(nodes)

    Sets a list of nodes as aim constraint sources for the camera.



    :param nodes: The nodes to set as aim constraint sources.
    :type nodes: List[vrdNode]

    
    

.. _vredvrdCameraNode.setAimVisualizationScale(value):
.. py:method:: vrdCameraNode.setAimVisualizationScale(value)

    Sets the scaling value for the aim and up vector visualization.



    :param value: The scaling value (minimum: 0)
    :type value: float

    
    

.. _vredvrdCameraNode.setAimVisualizationVisible(enable):
.. py:method:: vrdCameraNode.setAimVisualizationVisible(enable)

    Enables / disables the aim and up vector visualizations.



    :param enable: True to enable the visualization, False to disable.
    :type enable: bool

    
    

.. _vredvrdCameraNode.setDollyZoom(enabled):
.. py:method:: vrdCameraNode.setDollyZoom(enabled)

    Enables / disables dolly zoom mode.



    :param enabled: True to enable dolly zoom mode, False to disable.
    :type enabled: bool

    
    

.. _vredvrdCameraNode.setEvaluateNavigationMode(enabled):
.. py:method:: vrdCameraNode.setEvaluateNavigationMode(enabled)

    Enable / disable the evaluation of the navigation mode when playing camera animations.



    :param enabled: True enables evaluation, False disables it.
    :type enabled: bool

    
    

.. _vredvrdCameraNode.setInitialCamera():
.. py:method:: vrdCameraNode.setInitialCamera()

    Sets this camera to be the initial camera.




    
    

.. _vredvrdCameraNode.setUpVectorConstraintSources(nodes):
.. py:method:: vrdCameraNode.setUpVectorConstraintSources(nodes)

    Sets a list of nodes as up vector constraint sources.



    :param nodes: The nodes to set as up vector constraint sources.
    :type nodes: List[vrdNode]

    
    

.. _vredvrdCameraNode.setVisualizationScale(value):
.. py:method:: vrdCameraNode.setVisualizationScale(value)

    Sets a scaling value for the camera visualization.



    :param value: The scaling value (minimum: 0)
    :type value: float

    
    

.. _vredvrdCameraNode.setVisualizationVisible(enable):
.. py:method:: vrdCameraNode.setVisualizationVisible(enable)

    Enables / disables the visualization of the camera.

    Enabling this will show a visualization of the camera in the render window.

    :param enable: True to enable the visualization, False to disable.
    :type enable: bool

    
    

.. _vredvrdCameraNode.updateFromPerspectiveMatch():
.. py:method:: vrdCameraNode.updateFromPerspectiveMatch()

    Updates this camera's focal length and rotation according to perspective match settings.




    
    










