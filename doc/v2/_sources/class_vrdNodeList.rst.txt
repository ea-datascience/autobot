-----------
vrdNodeList
-----------


.. _vredvrdNodeList:
.. py:class:: vrdNodeList

(Inherits :py:class:`vrdObjectList`)

This class gives access to a collection of nodes.

Operations on this list will directly be executed on the underlying data model.

|             Example:
|             Node A has a child node B. B has two child nodes C and D.

.. code-block:: python

     # We want to reparent node D so that it is on the same hierarchy level as B and has A
     # as new parent
     a = vrNodeService.findNode('A')
     b = vrNodeService.findNode('B')
     d = b.children.find('D')
     a.children.append(d)
     
     # There's no need to remove d from b's list of children. This is all done automatically
     # since a vrdNode can only have a single parent.
     # You can check the number of children afterwards.
     print(a.children.size())  # this will now be 2
     print(b.children.size())  # this will now be 1
..






Summary
=======

Functions:
    * :ref:`append(value) <vredvrdNodeList.append(value)>`
    * :ref:`append(values) <vredvrdNodeList.append(values)>`
    * :ref:`at(i) → vrdNode<vredvrdNodeList.at(i)>`
    * :ref:`canInsert(value) → bool<vredvrdNodeList.canInsert(value)>`
    * :ref:`clear() <vredvrdNodeList.clear()>`
    * :ref:`contains(value) → bool<vredvrdNodeList.contains(value)>`
    * :ref:`count(value) → integer<vredvrdNodeList.count(value)>`
    * :ref:`data() → List[vrdNode]<vredvrdNodeList.data()>`
    * :ref:`find(name) → vrdNode<vredvrdNodeList.find(name)>`
    * :ref:`index(value, start, end) → integer<vredvrdNodeList.index(value, start, end)>`
    * :ref:`insert(i, value) <vredvrdNodeList.insert(i, value)>`
    * :ref:`insert(i, values) <vredvrdNodeList.insert(i, values)>`
    * :ref:`move(from, to) → bool<vredvrdNodeList.move(from, to)>`
    * :ref:`remove(value) → bool<vredvrdNodeList.remove(value)>`
    * :ref:`removeAll(value) → integer<vredvrdNodeList.removeAll(value)>`
    * :ref:`removeAt(i) → bool<vredvrdNodeList.removeAt(i)>`
    * :ref:`size() → integer<vredvrdNodeList.size()>`


Functions
=========


.. _vredvrdNodeList.append(value):
.. py:method:: vrdNodeList.append(value)

    Appends the value to this list.



    :param value: The value to append
    :type value: vrdNode

    
    

.. _vredvrdNodeList.append(values):
.. py:method:: vrdNodeList.append(values)

    Appends the items of the value list to this list.



    :param values: The values to append
    :type values: List[vrdNode]

    
    

.. _vredvrdNodeList.at(i):
.. py:method:: vrdNodeList.at(i)

    Get the value at the given index.



    :param i: 
    :type i: integer

    :return: i The index of the requested value
    :rtype: vrdNode

.. _vredvrdNodeList.canInsert(value):
.. py:method:: vrdNodeList.canInsert(value)

    Check, if the given entry can be inserted.



    :param value: 
    :type value: vrdNode

    :return: True, if insert is allowed
    :rtype: bool

.. _vredvrdNodeList.clear():
.. py:method:: vrdNodeList.clear()

    Removes all items from the list.




    
    

.. _vredvrdNodeList.contains(value):
.. py:method:: vrdNodeList.contains(value)

    Check, if an element is already in the list.



    :param value: 
    :type value: vrdNode

    :return: True, if the given value is in this list
    :rtype: bool

.. _vredvrdNodeList.count(value):
.. py:method:: vrdNodeList.count(value)

    Count the occurences of a given vlaue.



    :param value: 
    :type value: vrdNode

    :return: The number of times, the value has been found in the list
    :rtype: integer

.. _vredvrdNodeList.data():
.. py:method:: vrdNodeList.data()

    Get all entries of this list.




    :return: List of elements
    :rtype: List[vrdNode]

.. _vredvrdNodeList.find(name):
.. py:method:: vrdNodeList.find(name)

    Returns first occurrence with given name.



    :param name: Name
    :type name: string

    :return: 
    :rtype: vrdNode

.. _vredvrdNodeList.index(value, start, end):
.. py:method:: vrdNodeList.index(value, start=0, end=-1)

    Returns the index of the given value.



    :param value: The value to search
    :type value: vrdNode

    :param start: The index to start the search, default is 0
    :type start: integer

    :param end: The index to end the search, default is -1 to search until the end
    :type end: integer

    :return: The index or -1, if not found
    :rtype: integer

.. _vredvrdNodeList.insert(i, value):
.. py:method:: vrdNodeList.insert(i, value)

    Insert a value at a given position.



    :param i: The position, starting from 0
    :type i: integer

    :param value: The value to be inserted
    :type value: vrdNode

    
    

.. _vredvrdNodeList.insert(i, values):
.. py:method:: vrdNodeList.insert(i, values)

    Insert values at a given position.



    :param i: The position, starting from 0
    :type i: integer

    :param values: The values to be inserted
    :type values: List[vrdNode]

    
    

.. _vredvrdNodeList.move(from, to):
.. py:method:: vrdNodeList.move(from, to)

    Moves a values inside the list.



    :param from: The index to move
    :type from: integer

    :param to: The destination index
    :type to: integer

    :return: True on success, False otherwise
    :rtype: bool

.. _vredvrdNodeList.remove(value):
.. py:method:: vrdNodeList.remove(value)

    Remove the first occurences of the given value.



    :param value: 
    :type value: vrdNode

    :return: True, if the value has been removed
    :rtype: bool

.. _vredvrdNodeList.removeAll(value):
.. py:method:: vrdNodeList.removeAll(value)

    Remove all occurences of the given value.



    :param value: 
    :type value: vrdNode

    :return: The number of value that have been removed
    :rtype: integer

.. _vredvrdNodeList.removeAt(i):
.. py:method:: vrdNodeList.removeAt(i)

    Remove a value from the list.



    :param i: Index of the value to be removed
    :type i: integer

    :return: True, if the value has been removed
    :rtype: bool

.. _vredvrdNodeList.size():
.. py:method:: vrdNodeList.size()

    




    :return: Number of elements in this list.
    :rtype: integer










