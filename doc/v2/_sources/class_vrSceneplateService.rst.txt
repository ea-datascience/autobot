-------------------
vrSceneplateService
-------------------


.. _vredvrSceneplateService:
.. py:class:: vrSceneplateService

(Inherits :py:class:`vrBaseService`)

Base class for all work with scene plate.







Summary
=======

Functions:
    * :ref:`clearSelection() <vredvrSceneplateService.clearSelection()>`
    * :ref:`copyNodes(nodes) <vredvrSceneplateService.copyNodes(nodes)>`
    * :ref:`createGroupForNodes(nodes) → vrdNode<vredvrSceneplateService.createGroupForNodes(nodes)>`
    * :ref:`createNode(parent, type, name) → vrdNode<vredvrSceneplateService.createNode(parent, type, name)>`
    * :ref:`createSwitchForNodes(nodes) → vrdSwitchNode<vredvrSceneplateService.createSwitchForNodes(nodes)>`
    * :ref:`cutNodes(nodes) <vredvrSceneplateService.cutNodes(nodes)>`
    * :ref:`duplicateNodes(nodes) <vredvrSceneplateService.duplicateNodes(nodes)>`
    * :ref:`findNode(name) → vrdNode<vredvrSceneplateService.findNode(name)>`
    * :ref:`findNodes(name) → List[vrdNode]<vredvrSceneplateService.findNodes(name)>`
    * :ref:`getAllNodes() → List[vrdNode]<vredvrSceneplateService.getAllNodes()>`
    * :ref:`getAllSceneplates() → List[vrdSceneplateNode]<vredvrSceneplateService.getAllSceneplates()>`
    * :ref:`getDefaultBackgroundColor() → QVector3D<vredvrSceneplateService.getDefaultBackgroundColor()>`
    * :ref:`getDefaultBackgroundTransparency() → float<vredvrSceneplateService.getDefaultBackgroundTransparency()>`
    * :ref:`getDefaultFont() → string<vredvrSceneplateService.getDefaultFont()>`
    * :ref:`getDefaultFontColor() → QVector3D<vredvrSceneplateService.getDefaultFontColor()>`
    * :ref:`getPreviewImage(sceneplate) → QImage<vredvrSceneplateService.getPreviewImage(sceneplate)>`
    * :ref:`getRootNode() → vrdNode<vredvrSceneplateService.getRootNode()>`
    * :ref:`getSelectedNodes() → List[vrdNode]<vredvrSceneplateService.getSelectedNodes()>`
    * :ref:`loadNodes(filename) → bool<vredvrSceneplateService.loadNodes(filename)>`
    * :ref:`pasteAllAttributes(nodes) <vredvrSceneplateService.pasteAllAttributes(nodes)>`
    * :ref:`pasteColorCorrection(nodes) <vredvrSceneplateService.pasteColorCorrection(nodes)>`
    * :ref:`pasteNodes(targetRoot) <vredvrSceneplateService.pasteNodes(targetRoot)>`
    * :ref:`pasteProperties(nodes) <vredvrSceneplateService.pasteProperties(nodes)>`
    * :ref:`pasteSizeAndPosition(nodes) <vredvrSceneplateService.pasteSizeAndPosition(nodes)>`
    * :ref:`reloadWebPage(nodes) <vredvrSceneplateService.reloadWebPage(nodes)>`
    * :ref:`removeAllGroups() <vredvrSceneplateService.removeAllGroups()>`
    * :ref:`removeNodes(nodes) <vredvrSceneplateService.removeNodes(nodes)>`
    * :ref:`saveNodes(filename, nodes) → bool<vredvrSceneplateService.saveNodes(filename, nodes)>`
    * :ref:`setDefaultBackgroundColor(color) <vredvrSceneplateService.setDefaultBackgroundColor(color)>`
    * :ref:`setDefaultBackgroundTransparency(transparency) <vredvrSceneplateService.setDefaultBackgroundTransparency(transparency)>`
    * :ref:`setDefaultFont(font) <vredvrSceneplateService.setDefaultFont(font)>`
    * :ref:`setDefaultFontColor(color) <vredvrSceneplateService.setDefaultFontColor(color)>`
    * :ref:`setSelectedNodes(nodes) <vredvrSceneplateService.setSelectedNodes(nodes)>`

Signals:
    * :ref:`nodesAdded(nodes) <vredvrSceneplateService.nodesAdded(nodes)>`
    * :ref:`nodesChanged() <vredvrSceneplateService.nodesChanged()>`
    * :ref:`nodesRemoved(nodes) <vredvrSceneplateService.nodesRemoved(nodes)>`
    * :ref:`nodesSelected(nodes) <vredvrSceneplateService.nodesSelected(nodes)>`


Functions
=========


.. _vredvrSceneplateService.clearSelection():
.. py:method:: vrSceneplateService.clearSelection()

    Clears the current sceneplate selection.




    
    

.. _vredvrSceneplateService.copyNodes(nodes):
.. py:method:: vrSceneplateService.copyNodes(nodes)

    Copy Nodes.



    :param nodes: List of nodes to be copied
    :type nodes: List[vrdNode]

    
    

.. _vredvrSceneplateService.createGroupForNodes(nodes):
.. py:method:: vrSceneplateService.createGroupForNodes(nodes)

    All given nodes will be moved to a new created group.



    :param nodes: Nodes to be grouped
    :type nodes: List[vrdNode]

    :return: Created group
    :rtype: vrdNode

.. _vredvrSceneplateService.createNode(parent, type, name):
.. py:method:: vrSceneplateService.createNode(parent, type, name)

    Creates a new sceneplate node.



    :param parent: Parent to add the new created node (has to be a child of scene plate root)
    :type parent: vrdNode

    :param type: The type of the new created node (e.g. frontplate)
    :type type: :ref:`vrSceneplateTypes.NodeType <vredvrSceneplateTypes.NodeType>`

    :param name: The name of the new created node
    :type name: string

    :return: Created node
    :rtype: vrdNode

.. _vredvrSceneplateService.createSwitchForNodes(nodes):
.. py:method:: vrSceneplateService.createSwitchForNodes(nodes)

    All given nodes will be moved to a new created switch.



    :param nodes: Nodes to be moved to switch
    :type nodes: List[vrdNode]

    :return: Created node
    :rtype: vrdSwitchNode

.. _vredvrSceneplateService.cutNodes(nodes):
.. py:method:: vrSceneplateService.cutNodes(nodes)

    Cut nodes.



    :param nodes: List of nodes to be cut
    :type nodes: List[vrdNode]

    
    

.. _vredvrSceneplateService.duplicateNodes(nodes):
.. py:method:: vrSceneplateService.duplicateNodes(nodes)

    Duplicate the nodes.

    Each duplicated node is created as child of the same parent as the original node

    :param nodes: List of nodes to duplicate
    :type nodes: List[vrdNode]

    
    

.. _vredvrSceneplateService.findNode(name):
.. py:method:: vrSceneplateService.findNode(name)

    Returns the first node found in sceneplate hierarchy with the given name.



    :param name: Name of node
    :type name: string

    :return: Node with given name
    :rtype: vrdNode

.. _vredvrSceneplateService.findNodes(name):
.. py:method:: vrSceneplateService.findNodes(name)

    Returns list of nodes found in sceneplate hierarchy with the given name.



    :param name: Name of nodes
    :type name: string

    :return: List of nodes with given name
    :rtype: List[vrdNode]

.. _vredvrSceneplateService.getAllNodes():
.. py:method:: vrSceneplateService.getAllNodes()

    Returns all nodes (sceneplates, groups and switches)




    :return: List of all nodes
    :rtype: List[vrdNode]

.. _vredvrSceneplateService.getAllSceneplates():
.. py:method:: vrSceneplateService.getAllSceneplates()

    Returns all sceneplates (excluding groups and switches)




    :return: List of all sceneplates
    :rtype: List[vrdSceneplateNode]

.. _vredvrSceneplateService.getDefaultBackgroundColor():
.. py:method:: vrSceneplateService.getDefaultBackgroundColor()

    Returns the default background color for new created (text) sceneplates.




    :return: Background color of a text sceneplate
    :rtype: QVector3D

.. _vredvrSceneplateService.getDefaultBackgroundTransparency():
.. py:method:: vrSceneplateService.getDefaultBackgroundTransparency()

    Returns the default background transparency for new created (text) sceneplates.




    :return: Background transparency
    :rtype: float

.. _vredvrSceneplateService.getDefaultFont():
.. py:method:: vrSceneplateService.getDefaultFont()

    Returns the default font for new created (text) sceneplates.




    :return: Font name
    :rtype: string

.. _vredvrSceneplateService.getDefaultFontColor():
.. py:method:: vrSceneplateService.getDefaultFontColor()

    Returns the default font color for new created (text) sceneplates.




    :return: Color of default font
    :rtype: QVector3D

.. _vredvrSceneplateService.getPreviewImage(sceneplate):
.. py:method:: vrSceneplateService.getPreviewImage(sceneplate)

    Returns an image for a node, the image shows the current content of the sceneplate. If a group or switch is selected the content of the first visible sceneplate will be returned.



    :param sceneplate: 
    :type sceneplate: vrdNode

    :return: Image showing content of sceneplate node
    :rtype: QImage

.. _vredvrSceneplateService.getRootNode():
.. py:method:: vrSceneplateService.getRootNode()

    Returns the root node of all sceneplates.




    :return: Root node
    :rtype: vrdNode

.. _vredvrSceneplateService.getSelectedNodes():
.. py:method:: vrSceneplateService.getSelectedNodes()

    Returns the currently selected nodes.




    :return: Selected nodes
    :rtype: List[vrdNode]

.. _vredvrSceneplateService.loadNodes(filename):
.. py:method:: vrSceneplateService.loadNodes(filename)

    Load sceneplate nodes from file with the given name.



    :param filename: File to load
    :type filename: string

    :return: True on success
    :rtype: bool

.. _vredvrSceneplateService.pasteAllAttributes(nodes):
.. py:method:: vrSceneplateService.pasteAllAttributes(nodes)

    Paste all attributes from the first node in copy buffer to the given nodes.



    :param nodes: Nodes to be changed
    :type nodes: List[vrdSceneplateNode]

    
    

.. _vredvrSceneplateService.pasteColorCorrection(nodes):
.. py:method:: vrSceneplateService.pasteColorCorrection(nodes)

    Paste color correction setting from the first node in copy buffer to the given nodes.



    :param nodes: Nodes to be changed
    :type nodes: List[vrdSceneplateNode]

    
    

.. _vredvrSceneplateService.pasteNodes(targetRoot):
.. py:method:: vrSceneplateService.pasteNodes(targetRoot)

    Paste nodes.



    :param targetRoot: Pastes copies of nodes in copy buffer to the given root
    :type targetRoot: vrdNode

    
    

.. _vredvrSceneplateService.pasteProperties(nodes):
.. py:method:: vrSceneplateService.pasteProperties(nodes)

    Paste properties (all information about the content) from the first node in copy buffer to the given nodes.



    :param nodes: Nodes to be changed
    :type nodes: List[vrdSceneplateNode]

    
    

.. _vredvrSceneplateService.pasteSizeAndPosition(nodes):
.. py:method:: vrSceneplateService.pasteSizeAndPosition(nodes)

    Paste size and position from the first node in copy buffer to the given nodes.



    :param nodes: Nodes to be changed
    :type nodes: List[vrdSceneplateNode]

    
    

.. _vredvrSceneplateService.reloadWebPage(nodes):
.. py:method:: vrSceneplateService.reloadWebPage(nodes)

    Reloads the web pages of the given nodes.



    :param nodes: Nodes to be reloaded
    :type nodes: List[vrdNode]

    
    

.. _vredvrSceneplateService.removeAllGroups():
.. py:method:: vrSceneplateService.removeAllGroups()

    Removes all groups (not switches) from the sceneplate hierarchy.




    
    

.. _vredvrSceneplateService.removeNodes(nodes):
.. py:method:: vrSceneplateService.removeNodes(nodes)

    Remove nodes from sceneplates.



    :param nodes: Nodes to be removed
    :type nodes: List[vrdNode]

    
    

.. _vredvrSceneplateService.saveNodes(filename, nodes):
.. py:method:: vrSceneplateService.saveNodes(filename, nodes)

    Saves the nodes to the file with the given name.



    :param filename: Target .osb file
    :type filename: string

    :param nodes: Nodes to be saved
    :type nodes: List[vrdNode]

    :return: True on success
    :rtype: bool

.. _vredvrSceneplateService.setDefaultBackgroundColor(color):
.. py:method:: vrSceneplateService.setDefaultBackgroundColor(color)

    Sets the default background color for new created (text) sceneplates.



    :param color: Background color for text sceneplates
    :type color: QVector3D

    
    

.. _vredvrSceneplateService.setDefaultBackgroundTransparency(transparency):
.. py:method:: vrSceneplateService.setDefaultBackgroundTransparency(transparency)

    Sets the default background transparency for new created (text) sceneplates.



    :param transparency: Background transparency
    :type transparency: float

    
    

.. _vredvrSceneplateService.setDefaultFont(font):
.. py:method:: vrSceneplateService.setDefaultFont(font)

    Sets the default font for new created (text) sceneplates.



    :param font: Name of the font
    :type font: string

    
    

.. _vredvrSceneplateService.setDefaultFontColor(color):
.. py:method:: vrSceneplateService.setDefaultFontColor(color)

    Sets the default font color for new created (text) sceneplates.



    :param color: Color for default font
    :type color: QVector3D

    
    

.. _vredvrSceneplateService.setSelectedNodes(nodes):
.. py:method:: vrSceneplateService.setSelectedNodes(nodes)

    Sets the sceneplate selection.



    :param nodes: Nodes to be selected
    :type nodes: List[vrdNode]

    
    






Signals
=======


.. _vredvrSceneplateService.nodesAdded(nodes):
.. py:method:: vrSceneplateService.nodesAdded(nodes)

    Notifies about nodes added to the sceneplate hierarchy.



    :param nodes: Added nodes
    :type nodes: List[vrdNode]

    
    

.. _vredvrSceneplateService.nodesChanged():
.. py:method:: vrSceneplateService.nodesChanged()

    Notifies about changes in node structure, e.g. after a new scene.




    
    

.. _vredvrSceneplateService.nodesRemoved(nodes):
.. py:method:: vrSceneplateService.nodesRemoved(nodes)

    Notifies about nodes removed from the sceneplate hierarchy.



    :param nodes: Removed nodes
    :type nodes: List[vrdNode]

    
    

.. _vredvrSceneplateService.nodesSelected(nodes):
.. py:method:: vrSceneplateService.nodesSelected(nodes)

    Notifies about selection changes of sceneplates.

    Sends the currently selected nodes, not the nodes that are added or removed from selection, but always the whole list of currently selected nodes.

    :param nodes: The currently selected nodes
    :type nodes: List[vrdNode]

    
    


