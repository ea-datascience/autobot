---------------------------
vrdIlluminationBakeSettings
---------------------------


.. _vredvrdIlluminationBakeSettings:
.. py:class:: vrdIlluminationBakeSettings

(Inherits :py:class:`vrdData`)

Settings for texture baking with     :any:`vrBakeService.bakeToTexture(geometryNodes, illuminationSettings, textureSettings, replaceTextureBake) <vredvrBakeService.bakeToTexture(geometryNodes, illuminationSettings, textureSettings, replaceTextureBake)>`.







Summary
=======

Functions:
    * :ref:`getAmbientOcclusionMaximumDistance() → float<vredvrdIlluminationBakeSettings.getAmbientOcclusionMaximumDistance()>`
    * :ref:`getAmbientOcclusionMinimumDistance() → float<vredvrdIlluminationBakeSettings.getAmbientOcclusionMinimumDistance()>`
    * :ref:`getAmbientOcclusionWeight() → vrBakeTypes.AmbientOcclusionWeight<vredvrdIlluminationBakeSettings.getAmbientOcclusionWeight()>`
    * :ref:`getColorBleeding() → bool<vredvrdIlluminationBakeSettings.getColorBleeding()>`
    * :ref:`getDirectIlluminationMode() → vrBakeTypes.DirectIlluminationMode<vredvrdIlluminationBakeSettings.getDirectIlluminationMode()>`
    * :ref:`getIndirectIllumination() → bool<vredvrdIlluminationBakeSettings.getIndirectIllumination()>`
    * :ref:`getIndirections() → integer<vredvrdIlluminationBakeSettings.getIndirections()>`
    * :ref:`getLightsLayer() → integer<vredvrdIlluminationBakeSettings.getLightsLayer()>`
    * :ref:`getMaterialOverride() → bool<vredvrdIlluminationBakeSettings.getMaterialOverride()>`
    * :ref:`getMaterialOverrideColor() → QColor<vredvrdIlluminationBakeSettings.getMaterialOverrideColor()>`
    * :ref:`setAmbientOcclusionMaximumDistance(value) <vredvrdIlluminationBakeSettings.setAmbientOcclusionMaximumDistance(value)>`
    * :ref:`setAmbientOcclusionMinimumDistance(value) <vredvrdIlluminationBakeSettings.setAmbientOcclusionMinimumDistance(value)>`
    * :ref:`setAmbientOcclusionWeight(value) <vredvrdIlluminationBakeSettings.setAmbientOcclusionWeight(value)>`
    * :ref:`setColorBleeding(value) <vredvrdIlluminationBakeSettings.setColorBleeding(value)>`
    * :ref:`setDirectIlluminationMode(value) <vredvrdIlluminationBakeSettings.setDirectIlluminationMode(value)>`
    * :ref:`setIndirectIllumination(value) <vredvrdIlluminationBakeSettings.setIndirectIllumination(value)>`
    * :ref:`setIndirections(value) <vredvrdIlluminationBakeSettings.setIndirections(value)>`
    * :ref:`setLightsLayer(value) <vredvrdIlluminationBakeSettings.setLightsLayer(value)>`
    * :ref:`setMaterialOverride(value) <vredvrdIlluminationBakeSettings.setMaterialOverride(value)>`
    * :ref:`setMaterialOverrideColor(value) <vredvrdIlluminationBakeSettings.setMaterialOverrideColor(value)>`
    * :ref:`vrdIlluminationBakeSettings() <vredvrdIlluminationBakeSettings.vrdIlluminationBakeSettings()>`


Functions
=========


.. _vredvrdIlluminationBakeSettings.getAmbientOcclusionMaximumDistance():
.. py:method:: vrdIlluminationBakeSettings.getAmbientOcclusionMaximumDistance()

    




    :return: The ambient occlusion maximum distance.
    :rtype: float

.. _vredvrdIlluminationBakeSettings.getAmbientOcclusionMinimumDistance():
.. py:method:: vrdIlluminationBakeSettings.getAmbientOcclusionMinimumDistance()

    




    :return: The ambient occlusion minimum distance.
    :rtype: float

.. _vredvrdIlluminationBakeSettings.getAmbientOcclusionWeight():
.. py:method:: vrdIlluminationBakeSettings.getAmbientOcclusionWeight()

    




    :return: The ambient occlusion weight mode.
    :rtype: :ref:`vrBakeTypes.AmbientOcclusionWeight <vredvrBakeTypes.AmbientOcclusionWeight>`

.. _vredvrdIlluminationBakeSettings.getColorBleeding():
.. py:method:: vrdIlluminationBakeSettings.getColorBleeding()

    




    :return: True if color bleeding should be used, False otherwise.
    :rtype: bool

.. _vredvrdIlluminationBakeSettings.getDirectIlluminationMode():
.. py:method:: vrdIlluminationBakeSettings.getDirectIlluminationMode()

    




    :return: The direct illumination mode.
    :rtype: :ref:`vrBakeTypes.DirectIlluminationMode <vredvrBakeTypes.DirectIlluminationMode>`

.. _vredvrdIlluminationBakeSettings.getIndirectIllumination():
.. py:method:: vrdIlluminationBakeSettings.getIndirectIllumination()

    




    :return: True if indirect illumination should be evaluated, False otherwise.
    :rtype: bool

.. _vredvrdIlluminationBakeSettings.getIndirections():
.. py:method:: vrdIlluminationBakeSettings.getIndirections()

    




    :return: The number of indirections.
    :rtype: integer

.. _vredvrdIlluminationBakeSettings.getLightsLayer():
.. py:method:: vrdIlluminationBakeSettings.getLightsLayer()

    




    :return: The layer index used for baking. See :any:`vrdIlluminationBakeSettings.setLightsLayer(value) <vredvrdIlluminationBakeSettings.setLightsLayer(value)>`.
    :rtype: integer

.. _vredvrdIlluminationBakeSettings.getMaterialOverride():
.. py:method:: vrdIlluminationBakeSettings.getMaterialOverride()

    




    :return: True if a material override should be used, False otherwise.
    :rtype: bool

.. _vredvrdIlluminationBakeSettings.getMaterialOverrideColor():
.. py:method:: vrdIlluminationBakeSettings.getMaterialOverrideColor()

    




    :return: The override material color.
    :rtype: QColor

.. _vredvrdIlluminationBakeSettings.setAmbientOcclusionMaximumDistance(value):
.. py:method:: vrdIlluminationBakeSettings.setAmbientOcclusionMaximumDistance(value)

    Sets the ambient occlusion maximum distance.

    Sets the maximum distance of objects to be taken into account for the ambient occlusion calculation.

    :param value: Distance in mm.
    :type value: float

    
    

.. _vredvrdIlluminationBakeSettings.setAmbientOcclusionMinimumDistance(value):
.. py:method:: vrdIlluminationBakeSettings.setAmbientOcclusionMinimumDistance(value)

    Sets the ambient occlusion minimum distance.

    Sets the minimum distance of objects to be taken into account for the ambient occlusion calculation.

    :param value: Distance in mm.
    :type value: float

    
    

.. _vredvrdIlluminationBakeSettings.setAmbientOcclusionWeight(value):
.. py:method:: vrdIlluminationBakeSettings.setAmbientOcclusionWeight(value)

    Sets the ambient occlusion weight mode.

    Sets how the ambient occlusion samples in the hemisphere above the calculation point are weighted.

    :param value: The ambient occlusion weight mode.
    :type value: :ref:`vrBakeTypes.AmbientOcclusionWeight <vredvrBakeTypes.AmbientOcclusionWeight>`

    
    

.. _vredvrdIlluminationBakeSettings.setColorBleeding(value):
.. py:method:: vrdIlluminationBakeSettings.setColorBleeding(value)

    Sets if color bleeding should be used.

    This affects the indirect illumination. If disabled the indirect illumination result is grayscale.

    :param value: True for using color bleeding, False otherwise.
    :type value: bool

    
    

.. _vredvrdIlluminationBakeSettings.setDirectIlluminationMode(value):
.. py:method:: vrdIlluminationBakeSettings.setDirectIlluminationMode(value)

    Sets the direct illumination mode.

    This mode defines the kind of data which will be baked.

    :param value: The direct illumination mode.
    :type value: :ref:`vrBakeTypes.DirectIlluminationMode <vredvrBakeTypes.DirectIlluminationMode>`

    
    

.. _vredvrdIlluminationBakeSettings.setIndirectIllumination(value):
.. py:method:: vrdIlluminationBakeSettings.setIndirectIllumination(value)

    Sets if indirect illumination should be evaluated.



    :param value: True for evaluating indirect illumination, False otherwise.
    :type value: bool

    
    

.. _vredvrdIlluminationBakeSettings.setIndirections(value):
.. py:method:: vrdIlluminationBakeSettings.setIndirections(value)

    Sets the number of indirections.

    Defines the number of calculated light bounces.

    :param value: Number of indirections.
    :type value: integer

    
    

.. _vredvrdIlluminationBakeSettings.setLightsLayer(value):
.. py:method:: vrdIlluminationBakeSettings.setLightsLayer(value)

    Only available for texture baking. Sets if only lights from a specific layer should be baked. By default, all active lights are baked.

    See :any:`vrdBaseLightNode.setBakeLayer(layer) <vredvrdBaseLightNode.setBakeLayer(layer)>` to set the layer for light sources, and :any:`vrdIncandescence.setBakeLayer(layer) <vredvrdIncandescence.setBakeLayer(layer)>` to set the layer for emissive materials (geometry lights).

    :param value: Layer index.               -1 (default) means light layer setting is ignored, i.e. all lights are baked 
              regardless of their layer setting.

              Value >= 0 means only lights with matching layer number are evaluated during baking.

              For baking base and separate lightmap, use layer 0 (base) and 1 (separate illumination).
    :type value: integer

    
    

.. _vredvrdIlluminationBakeSettings.setMaterialOverride(value):
.. py:method:: vrdIlluminationBakeSettings.setMaterialOverride(value)

    Sets if a global material override should be used.

    If enabled, all geometries will have a global diffuse material override during the bake calculation.

    :param value: True for using a material override, False otherwise.
    :type value: bool

    
    

.. _vredvrdIlluminationBakeSettings.setMaterialOverrideColor(value):
.. py:method:: vrdIlluminationBakeSettings.setMaterialOverrideColor(value)

    Sets the color of the override material.



    :param value: The color value.
    :type value: QColor

    
    

.. _vredvrdIlluminationBakeSettings.vrdIlluminationBakeSettings():
.. py:method:: vrdIlluminationBakeSettings.vrdIlluminationBakeSettings()

    Default constructor.




    
    










