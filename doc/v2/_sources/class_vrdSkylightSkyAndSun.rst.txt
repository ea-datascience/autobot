--------------------
vrdSkylightSkyAndSun
--------------------


.. _vredvrdSkylightSkyAndSun:
.. py:class:: vrdSkylightSkyAndSun

(Inherits :py:class:`vrdSceneObject`)

This class is used for all skylight properties of     :any:`vrdSkylightMaterial <vredvrdSkylightMaterial>`.



    .. _vredvrdSkylightSkyAndSun.SkyModel:
    .. py:class:: SkyModel




            

            .. _vredvrdSkylightSkyAndSun.SkyModel.Artistic:
            .. py:data:: Artistic


            

            .. _vredvrdSkylightSkyAndSun.SkyModel.Realistic:
            .. py:data:: Realistic





Summary
=======

Functions:
    * :ref:`getGroundColor() → QVector3D<vredvrdSkylightSkyAndSun.getGroundColor()>`
    * :ref:`getSkyModel() → vrdSkylightSkyAndSun.SkyModel<vredvrdSkylightSkyAndSun.getSkyModel()>`
    * :ref:`getSkyTurbidity() → float<vredvrdSkylightSkyAndSun.getSkyTurbidity()>`
    * :ref:`getSunScale() → float<vredvrdSkylightSkyAndSun.getSunScale()>`
    * :ref:`getSunVisibleInSpecularReflections() → bool<vredvrdSkylightSkyAndSun.getSunVisibleInSpecularReflections()>`
    * :ref:`getUseMirroredSkyAsGround() → bool<vredvrdSkylightSkyAndSun.getUseMirroredSkyAsGround()>`
    * :ref:`setGroundColor(value) <vredvrdSkylightSkyAndSun.setGroundColor(value)>`
    * :ref:`setSkyModel(value) <vredvrdSkylightSkyAndSun.setSkyModel(value)>`
    * :ref:`setSkyTurbidity(value) <vredvrdSkylightSkyAndSun.setSkyTurbidity(value)>`
    * :ref:`setSunScale(value) <vredvrdSkylightSkyAndSun.setSunScale(value)>`
    * :ref:`setSunVisibleInSpecularReflections(value) <vredvrdSkylightSkyAndSun.setSunVisibleInSpecularReflections(value)>`
    * :ref:`setUseMirroredSkyAsGround(value) <vredvrdSkylightSkyAndSun.setUseMirroredSkyAsGround(value)>`


Functions
=========


.. _vredvrdSkylightSkyAndSun.getGroundColor():
.. py:method:: vrdSkylightSkyAndSun.getGroundColor()

    Gets the color for the single-colored ground in the lower hemisphere if Use Mirrored Sky as Ground is not active.




    :return: The current color for the ground.
    :rtype: QVector3D

.. _vredvrdSkylightSkyAndSun.getSkyModel():
.. py:method:: vrdSkylightSkyAndSun.getSkyModel()

    Queries the used sky model.




    :return: The current sky model.
    :rtype: :ref:`vrdSkylightSkyAndSun.SkyModel <vredvrdSkylightSkyAndSun.SkyModel>`

.. _vredvrdSkylightSkyAndSun.getSkyTurbidity():
.. py:method:: vrdSkylightSkyAndSun.getSkyTurbidity()

    Gets the amount of haze in the atmosphere.




    :return: Current used value for the amount of haze in the atmosphere.
    :rtype: float

.. _vredvrdSkylightSkyAndSun.getSunScale():
.. py:method:: vrdSkylightSkyAndSun.getSunScale()

    Gets the size of the sun.




    :return: Current used value for the size of the sun.
    :rtype: float

.. _vredvrdSkylightSkyAndSun.getSunVisibleInSpecularReflections():
.. py:method:: vrdSkylightSkyAndSun.getSunVisibleInSpecularReflections()

    Queries whether the sun of this skylight material is visible in all specular reflections in the scene.




    :return: whether the sun of this skylight material is visible in all specular reflections in the scene.
    :rtype: bool

.. _vredvrdSkylightSkyAndSun.getUseMirroredSkyAsGround():
.. py:method:: vrdSkylightSkyAndSun.getUseMirroredSkyAsGround()

    Queries if the upper hemisphere is mirrored.




    :return: Current state.
    :rtype: bool

.. _vredvrdSkylightSkyAndSun.setGroundColor(value):
.. py:method:: vrdSkylightSkyAndSun.setGroundColor(value)

    Sets the color for the single-colored ground in the lower hemisphere if Use Mirrored Sky as Ground is not active.



    :param value: The new color for the ground.
    :type value: QVector3D

    
    

.. _vredvrdSkylightSkyAndSun.setSkyModel(value):
.. py:method:: vrdSkylightSkyAndSun.setSkyModel(value)

    Choose between two different sky models: Realistic and Artistic. The artistic sky model produces more reddish and colorful skies, especially for sunrise/sunsets.



    :param value: The new sky model.
    :type value: :ref:`vrdSkylightSkyAndSun.SkyModel <vredvrdSkylightSkyAndSun.SkyModel>`

    
    

.. _vredvrdSkylightSkyAndSun.setSkyTurbidity(value):
.. py:method:: vrdSkylightSkyAndSun.setSkyTurbidity(value)

    Controls the amount of haze in the atmosphere. Low values correspond to a clear sky. The default value of 3.0 is a clear sky in a temperate climate. The maximum value of 10.0 yields a hazy sky.



    :param value: New value for the amount of haze in the atmosphere.
    :type value: float

    
    

.. _vredvrdSkylightSkyAndSun.setSunScale(value):
.. py:method:: vrdSkylightSkyAndSun.setSunScale(value)

    Controls the size of the sun. The default value 1.0 corresponds to the actual size of the sun, seen from the earth. The sun is drawn as a filled circle within the sky environment. Increase the sun scale to get softer shadows with raytracing.



    :param value: New value for the size of the sun.
    :type value: float

    
    

.. _vredvrdSkylightSkyAndSun.setSunVisibleInSpecularReflections(value):
.. py:method:: vrdSkylightSkyAndSun.setSunVisibleInSpecularReflections(value)

    Defines whether the sun of this skylight material is visible in all specular reflections in the scene, for example, on clear coat.



    :param value: State whether the sun of this skylight material is visible in all specular reflections in the scene.
    :type value: bool

    
    

.. _vredvrdSkylightSkyAndSun.setUseMirroredSkyAsGround(value):
.. py:method:: vrdSkylightSkyAndSun.setUseMirroredSkyAsGround(value)

    Uses the mirrored upper hemisphere (sky without sun) as the lower hemisphere (ground). If disabled, a uniform colored ground is used, see         :any:`vrdSkylightSkyAndSun.setGroundColor(value) <vredvrdSkylightSkyAndSun.setGroundColor(value)>`.



    :param value: New state.
    :type value: bool

    
    










